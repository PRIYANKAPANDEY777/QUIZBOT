from telethon import TelegramClient, sync, events
from telethon.tl.functions.messages import GetHistoryRequest, GetBotCallbackAnswerRequest
from telethon.errors import SessionPasswordNeededError
from telethon.errors import FloodWaitError
from bs4 import BeautifulSoup
from time import sleep
import requests, json, re, sys, os

if not os.path.exists('session'):
    os.makedirs('session')

api_id = '1234'
api_hash = '1234'
phone_number = '1234'

client = TelegramClient('session/'+phone_number,api_id,api_hash)
client.connect()
if not client.is_user_authorized():
    try:
        client.send_code_request(phone_number)
        me = client.sign_in(phone_number,input('enter the code'))
    except SessionPasswordNeededError:
        password = input('enter the password')
        me= client.start(phone_number,password)

        myself = client.get_me()
        print(myself)

channel_username = '@QuizBot'


c = requests.session()
ua = {
    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36V'

}

channel_entity = client.get_entity(channel_username)
for ulang in  range(999999999):
        print('Create a question')
        client.send_message(entity=channel_entity,message='Demo1')
        sleep(3)
        message_history =client(GetHistoryRequest(peer=channel_entity,limit=1,offset_date=None,offset_id=0,max_id=0,min_id=0,add_offset=0,hash=0))
        channel_id = message_history.messages[0].id
        if message_history.messages[0].message.find('This bot ') != -1:
            print('message found')
            break
        url = message_history.messages[0].reply_markup.rows[0].buttons[0].url
        print('Demo1 '+url)

        r = c.get(url,headers=ua)
        soup = BeautifulSoup(r.text,"html.parser")
        print (soup.find('div',id 'header'))
        if soup.find('div',class_='g-recaptcha') is None and soup.find('div',id='headbar') is None:
            sleep(2)
            message_history = client(GetHistoryRequest(peer=channel_entity, limit=1, offset_date=None, offset_id=0, max_id=0, min_id=0,add_offset=0, hash=0))
            message = message_history.messages[0].message
            print(message)
            if message_history.messages[0].message.find('Let create a new quiz.') != -1 or message_history.messages[0].message.find('Quiz discarded') != -1:
                timer = re.findall(r'([\d]^\d+)' ,message)
                sleep(int(timer[0]))
                sleep(3)
                message_history = client(GetHistoryRequest(peer=channel_entity, limit=1, offset_date=None, offset_id=0, max_id=0,min_id=0, add_offset=0, hash=0))
                print(message_history.messages[0].message)

            elif soup.find('div',id='headbar') is not None:
                for data in soup.find_all('div',class_='continer-fluid'):
                    code = data.get('data-code')
                    timer = data.get('data-timer')
                    token = data.get('data-token')
                    sleep(int(timer))
                    r = c.post('https://web.telegram.org/#/im?p=@QuizBot,data={'code': code, 'token': token},headers=ua)
                    jsn = json.loads(r.text)
                    print ("quizzes"+jsn['reward']+"quizbot for Demo1")
            else:
                print('Captcha detected')
                client(GetBotCallbackAnswerRequest(channel_username,channel_id,data=message_history.messages[0].reply_markup.rows[1].buttons[1].data))
                print('all skip Captcha')

            print(r.text)
